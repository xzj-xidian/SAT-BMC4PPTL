-- SMV description generated by Yosys 0.34+23 (git sha1 59fbee4009f, clang 6.0.0-1ubuntu2 -fPIC -Os)
MODULE _binary_to_bcd
  IVAR
    _ce_i : unsigned word[1]; -- ce_i
    _clk_i : unsigned word[1]; -- clk_i
    _dat_binary_i : unsigned word[16]; -- dat_binary_i
    _rst_i : unsigned word[1]; -- rst_i
    _start_i : unsigned word[1]; -- start_i
  VAR
    _bit_count : unsigned word[4]; -- \bit_count
    _busy_bit : unsigned word[1]; -- \busy_bit
    _bcd_reg : unsigned word[20]; -- \bcd_reg
    _bin_reg : unsigned word[16]; -- \bin_reg
    _dat_bcd_o : unsigned word[20]; -- \dat_bcd_o
  DEFINE
  busy_bit := bool(_busy_bit);
  dat_bcd_o_rst := bool(_dat_bcd_o = 0ub20_0);
  start_i := bool(_start_i);
  bin_reg_equ := (_bin_reg = _dat_binary_i);
  bcd_reg_clear := (_bcd_reg = 0ub20_0);
  rst_i := bool(_rst_i);
  ce_i := bool(_ce_i);

    _$auto$rtlil#cc#2558#Mux$214 := bool(_$logic_and$binary_to_bcd#v#170$45_Y) ? _$add$binary_to_bcd#v#170$46_Y[3:0] : _bit_count;
    _$auto$rtlil#cc#2558#Mux$210 := bool(_$auto$opt_dff#cc#194#make_patterns_logic$195) ? _$procmux$57_Y : _busy_bit;
    _$auto$rtlil#cc#2558#Mux$206 := bool(_$logic_and$binary_to_bcd#v#147$33_Y) ? 0ub20_00000000000000000000 : _$procmux$65_Y;
    _$auto$rtlil#cc#2558#Mux$200 := bool(_$auto$opt_dff#cc#219#make_patterns_logic$172) ? (_bcd_next[19:1] :: _bin_reg[15:15]) : _dat_bcd_o;
    _$add$binary_to_bcd#v#170$46_Y := resize(_bit_count, 32) + resize(0ub32_00000000000000000000000000000001, 32);
    _$auto$rtlil#cc#2558#Mux$202 := bool(_rst_i) ? 0ub20_00000000000000000000 : _$auto$rtlil#cc#2558#Mux$200;
    _$auto$rtlil#cc#2558#Mux$204 := bool(_$auto$opt_dff#cc#219#make_patterns_logic$181) ? _$procmux$79_Y : _bin_reg;
    _$auto$rtlil#cc#2558#Mux$208 := bool(_$auto$opt_dff#cc#219#make_patterns_logic$181) ? _$auto$rtlil#cc#2558#Mux$206 : _bcd_reg;
    _$auto$rtlil#cc#2558#Mux$212 := bool(_rst_i) ? 0ub1_0 : _$auto$rtlil#cc#2558#Mux$210;
    _$auto$rtlil#cc#2558#Mux$216 := bool(_busy_bit) ? _$auto$rtlil#cc#2558#Mux$214 : 0ub4_0000;
    _$auto$opt_dff#cc#194#make_patterns_logic$175 := resize(word1((_$logic_and$binary_to_bcd#v#158$40_Y :: _$logic_and$binary_to_bcd#v#153$37_Y :: _$logic_and$binary_to_bcd#v#147$33_Y) != 0ub3_0), 1);
    _$auto$opt_dff#cc#194#make_patterns_logic$177 := resize(word1(resize((_$logic_and$binary_to_bcd#v#153$37_Y :: _$logic_and$binary_to_bcd#v#147$33_Y), 2) != resize(0ub2_10, 2)), 1);
    _$auto$opt_dff#cc#194#make_patterns_logic$195 := resize(word1((_$logic_and$binary_to_bcd#v#153$37_Y :: _$logic_and$binary_to_bcd#v#147$33_Y) != 0ub2_0), 1);
    _$auto$rtlil#cc#2461#Not$171 := !resize(_$logic_and$binary_to_bcd#v#147$33_Y, 1);
    _$auto$rtlil#cc#2461#Not$180 := !resize(_rst_i, 1);
    _$auto$opt_dff#cc#219#make_patterns_logic$172 := resize(word1((_$logic_and$binary_to_bcd#v#153$37_Y :: _$auto$rtlil#cc#2461#Not$171) = !0ub2_0), 1);
    _$auto$opt_dff#cc#219#make_patterns_logic$181 := resize(word1((_$auto$rtlil#cc#2461#Not$180 :: _$auto$opt_dff#cc#194#make_patterns_logic$177 :: _$auto$opt_dff#cc#194#make_patterns_logic$175) = !0ub3_0), 1);
    _bit_count_done := resize(word1(resize(_bit_count, 4) = resize(0ub4_1111, 4)), 1);
    _$gt$binary_to_bcd#v#107$12_Y := resize(word1(resize(_bcd_reg[3:0], 4) > resize(0ub4_0100, 4)), 1);
    _$gt$binary_to_bcd#v#107$16_Y := resize(word1(resize(_bcd_reg[7:4], 4) > resize(0ub4_0100, 4)), 1);
    _$gt$binary_to_bcd#v#107$20_Y := resize(word1(resize(_bcd_reg[11:8], 4) > resize(0ub4_0100, 4)), 1);
    _$gt$binary_to_bcd#v#107$24_Y := resize(word1(resize(_bcd_reg[15:12], 4) > resize(0ub4_0100, 4)), 1);
    _$gt$binary_to_bcd#v#107$28_Y := resize(word1(resize(_bcd_reg[19:16], 4) > resize(0ub4_0100, 4)), 1);
    _$logic_and$binary_to_bcd#v#147$33_Y := resize(word1((_start_i != 0ub1_0) & (_done_o != 0ub1_0)), 1);
    _$logic_and$binary_to_bcd#v#153$35_Y := resize(word1((_$logic_and$binary_to_bcd#v#153$34_Y != 0ub1_0) & (_bit_count_done != 0ub1_0)), 1);
    _$logic_and$binary_to_bcd#v#153$37_Y := resize(word1((_$logic_and$binary_to_bcd#v#153$35_Y != 0ub1_0) & (_$not$binary_to_bcd#v#153$36_Y != 0ub1_0)), 1);
    _$logic_and$binary_to_bcd#v#153$34_Y := resize(word1((_busy_bit != 0ub1_0) & (_ce_i != 0ub1_0)), 1);
    _$logic_and$binary_to_bcd#v#158$40_Y := resize(word1((_$logic_and$binary_to_bcd#v#153$34_Y != 0ub1_0) & (_$not$binary_to_bcd#v#158$39_Y != 0ub1_0)), 1);
    _$logic_and$binary_to_bcd#v#170$45_Y := resize(word1((_ce_i != 0ub1_0) & (_$not$binary_to_bcd#v#158$39_Y != 0ub1_0)), 1);
    _$not$binary_to_bcd#v#153$36_Y := !resize(_start_i, 1);
    _done_o := !resize(_busy_bit, 1);
    _$not$binary_to_bcd#v#158$39_Y := !resize(_bit_count_done, 1);
    _0 := bool(_$gt$binary_to_bcd#v#107$28_Y) ? _$0#bcd_asl$func$binary_to_bcd#v#136$2#digit_less#3#0#$10[1:1] : _bcd_reg[17:17];
    _1 := bool(_$gt$binary_to_bcd#v#107$28_Y) ? _$0#bcd_asl$func$binary_to_bcd#v#136$2#digit_less#3#0#$10[2:2] : _bcd_reg[18:18];
    _2 := bool(_$gt$binary_to_bcd#v#107$24_Y) ? 0ub1_1 : 0ub1_0;
    _3 := bool(_$gt$binary_to_bcd#v#107$24_Y) ? _$sub$binary_to_bcd#v#106$23_Y[0:0] : _bcd_reg[12:12];
    _4 := bool(_$gt$binary_to_bcd#v#107$24_Y) ? _$sub$binary_to_bcd#v#106$23_Y[1:1] : _bcd_reg[13:13];
    _5 := bool(_$gt$binary_to_bcd#v#107$24_Y) ? _$sub$binary_to_bcd#v#106$23_Y[2:2] : _bcd_reg[14:14];
    _6 := bool(_$gt$binary_to_bcd#v#107$20_Y) ? 0ub1_1 : 0ub1_0;
    _7 := bool(_$gt$binary_to_bcd#v#107$20_Y) ? _$sub$binary_to_bcd#v#106$19_Y[0:0] : _bcd_reg[8:8];
    _8 := bool(_$gt$binary_to_bcd#v#107$20_Y) ? _$sub$binary_to_bcd#v#106$19_Y[1:1] : _bcd_reg[9:9];
    _9 := bool(_$gt$binary_to_bcd#v#107$20_Y) ? _$sub$binary_to_bcd#v#106$19_Y[2:2] : _bcd_reg[10:10];
    _10 := bool(_$gt$binary_to_bcd#v#107$16_Y) ? 0ub1_1 : 0ub1_0;
    _11 := bool(_$gt$binary_to_bcd#v#107$16_Y) ? _$sub$binary_to_bcd#v#106$15_Y[0:0] : _bcd_reg[4:4];
    _12 := bool(_$gt$binary_to_bcd#v#107$16_Y) ? _$sub$binary_to_bcd#v#106$15_Y[1:1] : _bcd_reg[5:5];
    _13 := bool(_$gt$binary_to_bcd#v#107$16_Y) ? _$sub$binary_to_bcd#v#106$15_Y[2:2] : _bcd_reg[6:6];
    _14 := bool(_$gt$binary_to_bcd#v#107$12_Y) ? 0ub1_1 : 0ub1_0;
    _15 := bool(_$gt$binary_to_bcd#v#107$12_Y) ? _$sub$binary_to_bcd#v#106$11_Y[0:0] : _bcd_reg[0:0];
    _16 := bool(_$gt$binary_to_bcd#v#107$12_Y) ? _$sub$binary_to_bcd#v#106$11_Y[1:1] : _bcd_reg[1:1];
    _17 := bool(_$gt$binary_to_bcd#v#107$12_Y) ? _$sub$binary_to_bcd#v#106$11_Y[2:2] : _bcd_reg[2:2];
    _$procmux$54_Y := bool(_$logic_and$binary_to_bcd#v#153$37_Y) ? 0ub1_0 : 0ub1_0;
    _$procmux$57_Y := bool(_$logic_and$binary_to_bcd#v#147$33_Y) ? 0ub1_1 : _$procmux$54_Y;
    _$procmux$62_Y := bool(_$logic_and$binary_to_bcd#v#158$40_Y) ? ((((((((((((((((((_1[0:0]) :: _0[0:0] :: _bcd_next[17:17]) :: _2[0:0]) :: _5[0:0]) :: _4[0:0]) :: _3[0:0]) :: _6[0:0]) :: _9[0:0]) :: _8[0:0]) :: _7[0:0]) :: _10[0:0]) :: _13[0:0]) :: _12[0:0]) :: _11[0:0]) :: _14[0:0]) :: _17[0:0]) :: _16[0:0]) :: _15[0:0] :: _bin_reg[15:15]) : 0ub20_00000000000000000000;
    _$procmux$65_Y := bool(_$logic_and$binary_to_bcd#v#153$37_Y) ? 0ub20_00000000000000000000 : _$procmux$62_Y;
    _$procmux$73_Y := bool(_$logic_and$binary_to_bcd#v#158$40_Y) ? (_bin_reg[14:0] :: 0ub1_0) : 0ub16_0000000000000000;
    _$procmux$76_Y := bool(_$logic_and$binary_to_bcd#v#153$37_Y) ? 0ub16_0000000000000000 : _$procmux$73_Y;
    _$procmux$79_Y := bool(_$logic_and$binary_to_bcd#v#147$33_Y) ? _dat_binary_i : _$procmux$76_Y;
    _18 := bool(_$gt$binary_to_bcd#v#107$28_Y) ? _$0#bcd_asl$func$binary_to_bcd#v#136$2#digit_less#3#0#$10[0:0] : _bcd_reg[16:16];
    _$sub$binary_to_bcd#v#106$11_Y := resize(_bcd_reg[3:0], 32) - resize(0ub32_00000000000000000000000000000101, 32);
    _$sub$binary_to_bcd#v#106$15_Y := resize(_bcd_reg[7:4], 32) - resize(0ub32_00000000000000000000000000000101, 32);
    _$sub$binary_to_bcd#v#106$19_Y := resize(_bcd_reg[11:8], 32) - resize(0ub32_00000000000000000000000000000101, 32);
    _$sub$binary_to_bcd#v#106$23_Y := resize(_bcd_reg[15:12], 32) - resize(0ub32_00000000000000000000000000000101, 32);
    _19 := resize(_bcd_reg[19:16], 32) - resize(0ub32_00000000000000000000000000000101, 32);
    _$0#bcd_asl$func$binary_to_bcd#v#136$2#digit_less#3#0#$10 := _19[3:0];
    _bin_next := _bin_reg[14:0] :: 0ub1_0;
    _bcd_next := _1[0:0] :: _0[0:0] :: _18[0:0] :: _2[0:0] :: _5[0:0] :: _4[0:0] :: _3[0:0] :: _6[0:0] :: _9[0:0] :: _8[0:0] :: _7[0:0] :: _10[0:0] :: _13[0:0] :: _12[0:0] :: _11[0:0] :: _14[0:0] :: _17[0:0] :: _16[0:0] :: _15[0:0] :: _bin_reg[15:15];
    _bcd_asl$func$binary_to_bcd#v#136$2#newbit := 0ub1_0;
    _bcd_asl$func$binary_to_bcd#v#136$2#k := 0ub32_00000000000000000000000000000000;
    _bcd_asl$func$binary_to_bcd#v#136$2#din := 0ub20_00000000000000000000;
    _bcd_asl$func$binary_to_bcd#v#136$2#digit_less := 0ub4_0000;
    _bcd_asl$func$binary_to_bcd#v#136$2#digit := 0ub4_0000;
    _bcd_asl$func$binary_to_bcd#v#136$2#cin := 0ub1_0;
    _$sub$binary_to_bcd#v#106$27_Y := _19[31:0];
  ASSIGN
    next(_bit_count) := _$auto$rtlil#cc#2558#Mux$216;
    next(_busy_bit) := _$auto$rtlil#cc#2558#Mux$212;
    next(_bcd_reg) := _$auto$rtlil#cc#2558#Mux$208;
    next(_bin_reg) := _$auto$rtlil#cc#2558#Mux$204;
    next(_dat_bcd_o) := _$auto$rtlil#cc#2558#Mux$202;
-- end of yosys output
